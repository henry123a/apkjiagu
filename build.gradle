// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        mavenCentral()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:3.6.3"
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        mavenCentral()
        google()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
        maven { url "https://jitpack.io" }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


//自动化构建，生成加固所需要的资源
task jiagu() {
    delete project('jiagu_shell').buildDir
    delete project('demo').buildDir
    delete project('jiaguLib').buildDir
    println(" =====清除了 jiagu_shell demo jiaguLib build目录========")
    //打包最新的apk 和 壳子 aar
    dependsOn project('jiagu_shell').tasks.findByPath(':jiagu_shell:bundleReleaseAar')
    dependsOn project('demo').tasks.findByPath(':demo:assembleDebug')
  //  dependsOn project('jiaguLib').tasks.findByPath(':jiaguLib:build')

    println(" =====重新编译了 jiagu_shell demo 生成最新 aar apk========")
    doLast {
        //在根工程中创建jiagu文件夹
        def root = new File(rootDir, '/jiagu')
        if (root.exists()) {
            delete root
        }
         root = rootProject.mkdir('jiagu')
        println("jiagu ============= 已重新创建了 - jiagu目录")
        copy {
            from 'jiagu_shell/build/outputs/aar'
            into { root.absolutePath + "/aar" }
            //include('**/*.aar')
        }
        //复制apk
        copy {
            from 'demo/build/outputs/apk/debug/demo-debug.apk'
            into { root.absolutePath }
            //include('**/*.aar')
        }
       // def p1 = 'java -jar jiaguLib.jar demo-release.apk keystore.cfg'.execute()

    }

}


static String getExeInfo(p1) {
    p1.waitFor()
    InputStream is = p1.getInputStream()
    String text = is.getText("utf-8").replace(":", "_").replace("+0800", "")
    is.close()
    text
}
